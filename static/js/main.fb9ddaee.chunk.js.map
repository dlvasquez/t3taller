{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","require","format","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","table","minWidth","App","props","initSocket","socket","socketIOClient","path","on","console","log","emit","merExchanges","event","Object","entries","map","value","push","setState","i","length","ticker","nameEvent","id","newEvents","eventFormated","time","prevState","events","bid","volume","buys","sid","sells","state","data","indicadoresStock","this","mercados","STOCKS","Grid","item","xs","TableContainer","style","width","component","Paper","Table","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","key","scope","company_name","country","quote_base","EXCHANGES","name","exchange_ticker","address","listed_companies","indicadoresMercado","nameCortoMercado","volCompra","volVenta","volTotal","cantidadAcciones","partMercado","nameStock","totalTransado","altoHistorico","bajoHistorico","ultimoPrecio","varPorcentual","nameMercado","listaCompanias","listaStocks","listaBuy","listaSell","listaNameStocks","volTotalMercados","filter","e","includes","st","b","s","m","Number","toPrecision","listaPrices","Math","max","o","min","items","stockIndices","mercadoIndices","height","dataKey","container","tablaIndicesStock","tablaIndicesMercado","tablaMercadoInfo","tablaStockInfo","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb9ddaee.chunk.js","sourcesContent":["import socketIOClient from 'socket.io-client';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  Line,\r\n  LineChart,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend\r\n} from 'recharts';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport './App.css';\r\n\r\nvar moment = require('moment'); // require\r\nmoment().format();\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n}));\r\n\r\n\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      socket: null,\r\n      data: {},\r\n      events: [],\r\n      sells: [],\r\n      buys: [],\r\n      indicadoresStock: {}\r\n\r\n    };\r\n  }\r\n\r\n  // const App = ({ }) => {\r\n  //   const [data, setData] = useState([]);\r\n\r\n  // 1. listen for a cpu event and update the state\r\n\r\n\r\n  componentWillMount() {\r\n    this.initSocket()\r\n    // this.useEffect()\r\n\r\n  }\r\n\r\n  // Connect to and initializes the socket.\r\n  initSocket = () => {\r\n    const socket = socketIOClient('wss://le-18262636.bitzonte.com', {\r\n      path: '/stocks'\r\n    });\r\n    socket.on('connect', () => {\r\n      console.log(\"Connected\");\r\n    })\r\n    socket.emit('EXCHANGES')\r\n    var merExchanges = []\r\n    socket.on('EXCHANGES', event => {\r\n      console.log(event);\r\n\r\n      // Object.keys(event).map(i => merExchanges.push(i))\r\n\r\n      Object.entries(event).map(([key, value]) => {\r\n        merExchanges.push(value)\r\n      })\r\n      // console.log(merExchanges);\r\n      this.setState({ 'EXCHANGES': merExchanges })\r\n    })\r\n    socket.emit('STOCKS');\r\n\r\n    socket.on('STOCKS', event => {\r\n      this.setState({ 'STOCKS': event })\r\n      console.log(event);\r\n      for (var i = 0; i < event.length; i++) {\r\n        const nameEvent = event[i].ticker;\r\n        this.setState({ nameEvent: {} })\r\n      }\r\n    })\r\n    var id = 0;\r\n    socket.on(\"UPDATE\", newEvents => {\r\n\r\n      var eventFormated = {\r\n        'id': id++,\r\n        'ticker': newEvents.ticker,\r\n        'value': newEvents.value,\r\n        'time': moment(newEvents.time).format('MMMM Do YYYY, h:mm:ss a')\r\n      }\r\n\r\n      this.setState(prevState => ({\r\n        'events': [...prevState.events, eventFormated]\r\n      }));\r\n      // console.log(eventFormated);\r\n    })\r\n\r\n    var bid = 0;\r\n    socket.on(\"BUY\", newEvents => {\r\n\r\n      var eventFormated = {\r\n        'id': bid++,\r\n        'ticker': newEvents.ticker,\r\n        'volume': newEvents.volume,\r\n        'time': moment(newEvents.time).format()\r\n      }\r\n\r\n      this.setState(prevState => ({\r\n        'buys': [...prevState.buys, eventFormated]\r\n      }));\r\n      // console.log(eventFormated);\r\n    })\r\n\r\n    var sid = 0;\r\n    socket.on(\"SELL\", newEvents => {\r\n\r\n      var eventFormated = {\r\n        'id': sid++,\r\n        'ticker': newEvents.ticker,\r\n        'volume': newEvents.volume,\r\n        'time': moment(newEvents.time).format()\r\n      }\r\n\r\n      this.setState(prevState => ({\r\n        'sells': [...prevState.sells, eventFormated]\r\n      }));\r\n      // console.log(eventFormated);\r\n    })\r\n\r\n    this.setState({ socket }\r\n    )\r\n\r\n  }\r\n\r\n  tablaStockInfo() {\r\n    // const classes = useStyles()\r\n    const mercados = this.state.STOCKS;\r\n    if (mercados) {\r\n      return (\r\n        <Grid item xs={6}>\r\n          <TableContainer style={{ width: '650px' }} component={Paper}>\r\n            <Table style={{ width: '650px' }} size=\"small\" aria-label=\"a dense table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Stocks</TableCell>\r\n                  <TableCell align=\"right\">Nombre Compañia&nbsp;</TableCell>\r\n                  <TableCell align=\"right\">País&nbsp;</TableCell>\r\n                  <TableCell align=\"right\">Moneda&nbsp;</TableCell>\r\n\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {mercados.map((row) => (\r\n                  <TableRow key={row.ticker}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.ticker}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{row.company_name}</TableCell>\r\n                    <TableCell align=\"right\">{row.country}</TableCell>\r\n                    <TableCell align=\"right\">{row.quote_base}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      )\r\n    }\r\n  }\r\n\r\n  tablaMercadoInfo() {\r\n    // const classes = useStyles()\r\n    const mercados = this.state.EXCHANGES;\r\n    if (mercados) {\r\n      return (\r\n        <Grid item xs={6}>\r\n          <TableContainer style={{ width: '650px' }} component={Paper}>\r\n            <Table style={{ width: '650px' }} size=\"small\" aria-label=\"a dense table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Mercados</TableCell>\r\n                  <TableCell align=\"right\">Exchange Ticker&nbsp;</TableCell>\r\n                  <TableCell align=\"right\">País&nbsp;</TableCell>\r\n                  <TableCell align=\"right\">Dirección&nbsp;</TableCell>\r\n                  <TableCell align=\"right\">Listado Compañías&nbsp;</TableCell>\r\n\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {mercados.map((row) => (\r\n                  <TableRow key={row.name}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.name}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{row.exchange_ticker}</TableCell>\r\n                    <TableCell align=\"right\">{row.country}</TableCell>\r\n                    <TableCell align=\"right\">{row.address}</TableCell>\r\n                    <TableCell align=\"right\">{row.listed_companies}</TableCell>\r\n\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  tablaIndicesMercado(indicadoresMercado) {\r\n    // const classes = useStyles();\r\n    if (indicadoresMercado) {\r\n      return (\r\n        <Grid item xs={6}>\r\n          <TableContainer style={{ width: '650px' }} component={Paper}>\r\n            <Table style={{ width: '650px' }} size=\"small\" aria-label=\"a dense table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Mercados</TableCell>\r\n                  <TableCell align=\"right\">Volumen Compra&nbsp;($)</TableCell>\r\n                  <TableCell align=\"right\">Volumen Venta&nbsp;($)</TableCell>\r\n                  <TableCell align=\"right\">Volumen Total&nbsp;($)</TableCell>\r\n                  <TableCell align=\"right\">Cantidad Acciones&nbsp;</TableCell>\r\n                  <TableCell align=\"right\">Participación Mercado&nbsp;(%)</TableCell>\r\n\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {indicadoresMercado.map((row) => (\r\n                  <TableRow key={row.nameCortoMercado}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.nameCortoMercado}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{row.volCompra}</TableCell>\r\n                    <TableCell align=\"right\">{row.volVenta}</TableCell>\r\n                    <TableCell align=\"right\">{row.volTotal}</TableCell>\r\n                    <TableCell align=\"right\">{row.cantidadAcciones}</TableCell>\r\n                    <TableCell align=\"right\">{row.partMercado}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  tablaIndicesStock(indicadoresStock) {\r\n    // const classes = useStyles();\r\n    if (indicadoresStock) {\r\n      return (\r\n        <Grid item xs={6}>\r\n\r\n          <TableContainer style={{ width: 650 }} component={Paper}>\r\n            <Table style={{ width: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Stocks</TableCell>\r\n                  <TableCell align=\"right\">Volumen Total Transado</TableCell>\r\n                  <TableCell align=\"right\">Alto Histórico&nbsp;($)</TableCell>\r\n                  <TableCell align=\"right\">Bajo Histórico&nbsp;($)</TableCell>\r\n                  <TableCell align=\"right\">Último Precio&nbsp;($)</TableCell>\r\n                  <TableCell align=\"right\">Variación Porcentual&nbsp;(%)</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {indicadoresStock.map((row) => (\r\n                  <TableRow key={row.nameStock}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.nameStock}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{row.totalTransado}</TableCell>\r\n                    <TableCell align=\"right\">{row.altoHistorico}</TableCell>\r\n                    <TableCell align=\"right\">{row.bajoHistorico}</TableCell>\r\n                    <TableCell align=\"right\">{row.ultimoPrecio}</TableCell>\r\n                    <TableCell align=\"right\">{row.varPorcentual}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  mercadoIndices() {\r\n    var indicadoresMercado = []\r\n    var volCompra = 0;\r\n    var volVenta = 0;\r\n    var volTotal = 0;\r\n    var cantidadAcciones = 0;\r\n    var partMercado = 0;\r\n    var nameMercado = null;\r\n    var nameCortoMercado = null;\r\n    var listaCompanias = []\r\n    var listaStocks = [];\r\n    var listaBuy = [];\r\n    var listaSell = [];\r\n    var listaNameStocks = [];\r\n    var volTotalMercados = 0;\r\n    // var listaPrices = [];\r\n\r\n    if (this.state.EXCHANGES) {\r\n      for (var i = 0; i < this.state.EXCHANGES.length; i++) {\r\n        volCompra = 0;\r\n        volVenta = 0;\r\n        volTotal = 0;\r\n        cantidadAcciones = 0;\r\n        partMercado = 0;\r\n\r\n\r\n        nameMercado = this.state.EXCHANGES[i].name;\r\n        nameCortoMercado = this.state.EXCHANGES[i].exchange_ticker;\r\n\r\n\r\n\r\n        listaCompanias = this.state.EXCHANGES[i].listed_companies;\r\n\r\n\r\n        // console.log(listaCompanias);\r\n\r\n        if (this.state.STOCKS) {\r\n          listaStocks = this.state.STOCKS.filter(e => listaCompanias.includes(e.company_name));\r\n\r\n          listaNameStocks = [];\r\n\r\n          for (var st = 0; st < listaStocks.length; st++) {\r\n            listaNameStocks.push(listaStocks[st].ticker)\r\n          }\r\n\r\n\r\n          listaBuy = this.state.buys.filter(e => listaNameStocks.includes(e.ticker));\r\n\r\n\r\n          listaSell = this.state.buys.filter(e => listaNameStocks.includes(e.ticker));\r\n\r\n          // console.log('A');\r\n          if (listaBuy.length > 1) {\r\n            for (var b = 0; b < listaBuy.length; b++) {\r\n              volCompra += listaBuy[b].volume;\r\n            }\r\n          }\r\n          if (listaSell.length > 1) {\r\n            for (var s = 0; s < listaSell.length; s++) {\r\n              volVenta += listaSell[s].volume;\r\n            }\r\n          }\r\n\r\n          volTotal = volCompra + volVenta;\r\n          volTotalMercados += volTotal;\r\n          cantidadAcciones = listaNameStocks.length;\r\n\r\n\r\n          // console.log({ nameMercado, volCompra, volVenta, volTotal, cantidadAcciones, partMercado })\r\n        }\r\n\r\n\r\n        indicadoresMercado.push({ nameCortoMercado, nameMercado, volCompra, volVenta, volTotal, cantidadAcciones, partMercado })\r\n      }\r\n\r\n      for (var m = 0; m < indicadoresMercado.length; m++) {\r\n        indicadoresMercado[m].partMercado = Number(indicadoresMercado[m].volTotal / volTotalMercados * 100).toPrecision(4);\r\n      }\r\n\r\n    }\r\n    // console.log(indicadoresMercado);\r\n    return indicadoresMercado;\r\n  }\r\n\r\n\r\n\r\n\r\n  stockIndices() {\r\n    var indicadoresStock = []\r\n    var totalTransado = 0;\r\n    var altoHistorico = 0;\r\n    var bajoHistorico = 0;\r\n    var ultimoPrecio = 0;\r\n    var varPorcentual = 0;\r\n    var nameStock = null;\r\n    var listaBuy = [];\r\n    var listaSell = [];\r\n    var listaPrices = [];\r\n    if (this.state.STOCKS) {\r\n      for (var i = 0; i < this.state.STOCKS.length; i++) {\r\n        totalTransado = 0;\r\n        altoHistorico = 0;\r\n        bajoHistorico = 0;\r\n        ultimoPrecio = 0;\r\n        varPorcentual = 0;\r\n\r\n        nameStock = this.state.STOCKS[i].ticker;\r\n        listaBuy = this.state.buys.filter(e => e.ticker === nameStock);\r\n        listaSell = this.state.buys.filter(e => e.ticker === nameStock);\r\n        listaPrices = this.state.events.filter(e => e.ticker === nameStock);\r\n\r\n        for (var b = 0; b < listaBuy.length; b++) {\r\n          totalTransado += listaBuy[b].volume;\r\n        }\r\n        for (var s = 0; b < listaSell.length; s++) {\r\n          totalTransado += listaSell[s].volume;\r\n        }\r\n        if (listaPrices.length > 1) {\r\n          altoHistorico = Math.max(...listaPrices.map(o => o.value), null);\r\n          bajoHistorico = Math.min(...listaPrices.map(o => o.value), null);\r\n          ultimoPrecio = listaPrices[listaPrices.length - 1].value;\r\n          if (listaPrices.length > 2) {\r\n            varPorcentual = Number((ultimoPrecio - listaPrices[listaPrices.length - 2].value) / listaPrices[listaPrices.length - 2].value * 100).toPrecision(2);\r\n          }\r\n        }\r\n        indicadoresStock.push({ nameStock, totalTransado, altoHistorico, bajoHistorico, ultimoPrecio, varPorcentual })\r\n      }\r\n    }\r\n\r\n    //console.log(indicadoresStock);\r\n    return indicadoresStock;\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const items = [];\r\n    var indicadoresStock = this.stockIndices();\r\n    var indicadoresMercado = this.mercadoIndices();\r\n    //const tablaStocks = this.tablaIndicesStock(indicadoresStock);\r\n    if (this.state.STOCKS) {\r\n      // console.log(this.state.STOCKS.length);\r\n      for (var i = 0; i < this.state.STOCKS.length; i++) {\r\n        // items.push(this.state.STOCKS[i].ticker);\r\n        items.push(\r\n          <Grid item xs={3}>\r\n            <div>\r\n              <h4>Precio {this.state.STOCKS[i].ticker} </h4>\r\n              <LineChart key={i} width={300} height={250} data={this.state.events.filter(e =>\r\n                e.ticker === this.state.STOCKS[i].ticker)}>\r\n                <XAxis dataKey=\"time\" />\r\n                <YAxis />\r\n                <Line dataKey=\"value\" />\r\n                <Tooltip></Tooltip>\r\n                <Legend ></Legend>\r\n              </LineChart>\r\n            </div>\r\n          </Grid>\r\n        )\r\n      }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n      <div>\r\n        <h1>Tarea 3</h1>\r\n\r\n        <Grid container spacing={10}>\r\n          {/* <ul> */}\r\n          {items}\r\n\r\n          {/* </ul> */}\r\n        </Grid>\r\n        <Grid container spacing={10}>\r\n\r\n          {this.tablaIndicesStock(indicadoresStock)}\r\n\r\n\r\n          {this.tablaIndicesMercado(indicadoresMercado)}\r\n\r\n          {this.tablaMercadoInfo()}\r\n\r\n          {this.tablaStockInfo()}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}